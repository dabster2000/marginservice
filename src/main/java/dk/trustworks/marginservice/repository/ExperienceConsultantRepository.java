package dk.trustworks.marginservice.repository;

import dk.trustworks.marginservice.model.ExperienceConsultant;
import dk.trustworks.marginservice.model.ExperienceLevel;
import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

public class ExperienceConsultantRepository {

    private JDBCClient jdbc;

    public ExperienceConsultantRepository(JDBCClient jdbc) {
        this.jdbc = jdbc;
    }

    private Single<SQLConnection> connect() {
        return jdbc.rxGetConnection()
                .map(c -> c.setOptions(new SQLOptions().setAutoGeneratedKeys(true)));
    }

    public Single<List<ExperienceConsultant>> getAll() {

        String sql = "SELECT * " +
                "FROM " +
                "usermanager.experience_consultants ec " +
                "ORDER BY " +
                "ec.id;";

        return connect().flatMap((SQLConnection connection) -> connection.rxQuery(sql)
                .map(rs -> rs.getRows().stream().map(ExperienceConsultant::new).collect(Collectors.toList()))
                .doFinally(connection::close));
    }

    public Single<ExperienceConsultant> getOne(int id) {
        String sql = "SELECT * " +
                "FROM " +
                "usermanager.experience_consultants ec " +
                "WHERE ec.id = ? ";

        return connect().flatMap((SQLConnection connection) -> connection.rxQueryWithParams(sql, new JsonArray().add(id))
                .map(rs -> rs.getRows().stream().map(ExperienceConsultant::new).findFirst().get())
                .doFinally(connection::close));
    }

    public Single<ExperienceConsultant> findByUseruuid(String useruuid) {
        String sql = "SELECT * " +
                "FROM " +
                "usermanager.experience_consultants ec " +
                "WHERE ec.useruuid LIKE ? ";

        return connect().flatMap((SQLConnection connection) -> connection.rxQueryWithParams(sql, new JsonArray().add(useruuid))
                .map(rs -> rs.getRows().stream().map(ExperienceConsultant::new).findFirst().get())
                .doFinally(connection::close));
    }

    public Completable updateOne(int id, ExperienceConsultant experienceConsultant) {
        return connect().flatMapCompletable(connection -> {
            String sql = "UPDATE " +
                    "usermanager.experience_consultants " +
                    "SET " +
                    "seniority = ? " +
                    "WHERE id = ?; ";
            JsonArray params = new JsonArray()
                    .add(experienceConsultant.getSeniority())
                    .add(id);
            return connection.rxUpdateWithParams(sql, params)
                    .flatMapCompletable(ur ->
                            ur.getUpdated() == 0 ?
                                    Completable
                                            .error(new NoSuchElementException("No experienceconsultant with id " + id))
                                    : Completable.complete()
                    )
                    .doFinally(connection::close);
        });
    }
}
