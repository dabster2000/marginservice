package dk.trustworks.marginservice.repository;

import dk.trustworks.marginservice.model.ExperienceLevel;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;

import java.util.List;
import java.util.stream.Collectors;

public class ExperienceLevelRepository {

    private JDBCClient jdbc;

    public ExperienceLevelRepository(JDBCClient jdbc) {
        this.jdbc = jdbc;
    }

    private Single<SQLConnection> connect() {
        return jdbc.rxGetConnection()
                .map(c -> c.setOptions(new SQLOptions().setAutoGeneratedKeys(true)));
    }

    public Single<List<ExperienceLevel>> getAllExperienceLevels() {

        String sql = "SELECT * " +
                "FROM " +
                "usermanager.experience_levels el " +
                "ORDER BY " +
                "el.level;";

        return connect().flatMap((SQLConnection connection) -> connection.rxQuery(sql)
                .map(rs -> rs.getRows().stream().map(ExperienceLevel::new).collect(Collectors.toList()))
                .doFinally(connection::close));
    }

    public Single<ExperienceLevel> getOne(int id) {
        String sql = "SELECT * " +
                "FROM " +
                "usermanager.experience_level el " +
                "WHERE el.id = ? ";

        return connect().flatMap((SQLConnection connection) -> connection.rxQueryWithParams(sql, new JsonArray().add(id))
                .map(rs -> rs.getRows().stream().map(ExperienceLevel::new).findFirst().get())
                .doFinally(connection::close));
    }

    public Single<ExperienceLevel> findByLevel(int level) {
        String sql = "SELECT * " +
                "FROM " +
                "usermanager.experience_level el " +
                "WHERE el.level = ? ";

        return connect().flatMap((SQLConnection connection) -> connection.rxQueryWithParams(sql, new JsonArray().add(level))
                .map(rs -> rs.getRows().stream().map(ExperienceLevel::new).findFirst().get())
                .doFinally(connection::close));
    }
}
